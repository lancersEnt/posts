scalar DateTime

type User{
  id: ID!
  posts: [Post!]
}

type Post {
  # Example field (placeholder)
  id: ID!
  content: String!
  authorId: String!
  type: String!
  videoUrl:String
  documentUrl:String
  imageUrl: String
  likersIds:[String]
  likers: [User]
  subscribersIds:[String]
  subscribers: [User]
  user: User
  createdAt: DateTime
  updatedAt: DateTime
}

input CreatePostInput {
  # Example field (placeholder)
  content: String!
  type: String!
  videoUrl:String
  documentUrl:String
  authorId: String!
  imageUrl: String
  createdAt: DateTime
}

input UpdatePostInput {
  content: String
  type: String
  videoUrl:String
  documentUrl:String
  authorId: String
  imageUrl: String
  updatedAt: DateTime
}

type Feed {
  count: Int
  posts: [Post]!
}

type Query {
  posts: [Post]!
  post(id: String!): Post
  userPosts(id: String!): [Post]!
  feed(page: Int!): Feed
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(id: String!, updatePostInput: UpdatePostInput!): Post!
  removePost(id: String!): Post
  likePost(postId:String!):Post
  unlikePost(postId:String!):Post

}

type Result {
  newPost: Post
}

type PostLikedResult {
  post: Post
}

type Subscription {
  postCreated: Result
  postLiked: PostLikedResult
  postUnliked: PostLikedResult
}

